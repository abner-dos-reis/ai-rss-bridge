from xml.etree.ElementTree import Element, SubElement, tostring
from xml.dom import minidom
from datetime import datetime

def generate_rss_xml(feed_data):
    """
    Generate RSS XML from feed data
    """
    # Create root RSS element
    rss = Element('rss', version='2.0')
    channel = SubElement(rss, 'channel')
    
    # Add channel information
    title = SubElement(channel, 'title')
    title.text = feed_data.get('title', 'AI Generated RSS Feed')
    
    description = SubElement(channel, 'description')
    description.text = feed_data.get('description', 'RSS feed generated by AI RSS Bridge')
    
    link = SubElement(channel, 'link')
    link.text = feed_data.get('url', '')
    
    last_build_date = SubElement(channel, 'lastBuildDate')
    last_build_date.text = datetime.now().strftime('%a, %d %b %Y %H:%M:%S %z')
    
    generator = SubElement(channel, 'generator')
    generator.text = 'AI RSS Bridge'
    
    # Add items
    items = feed_data.get('items', [])
    for item_data in items:
        item = SubElement(channel, 'item')
        
        item_title = SubElement(item, 'title')
        item_title.text = item_data.get('title', 'No Title')
        
        item_link = SubElement(item, 'link')
        item_link.text = item_data.get('link', '')
        
        item_description = SubElement(item, 'description')
        
        # Create enhanced description with source link and image
        enhanced_description = ""
        
        # Add image if available
        if item_data.get('image'):
            enhanced_description += f'<img src="{item_data["image"]}" style="max-width:100%; height:auto; margin-bottom:10px;" alt="Article image"><br>'
        
        # Add source link
        if item_data.get('link'):
            enhanced_description += f'<p><strong><a href="{item_data["link"]}" target="_blank" style="color:#007cba; text-decoration:none;">ðŸ”— Read Full Article</a></strong></p>'
        
        # Add description
        original_description = item_data.get('description', '')
        if original_description:
            enhanced_description += f'<p>{original_description}</p>'
        
        item_description.text = enhanced_description or 'No description available'
        
        if item_data.get('pubDate'):
            pub_date = SubElement(item, 'pubDate')
            pub_date.text = item_data.get('pubDate')
        
        guid = SubElement(item, 'guid')
        guid.text = item_data.get('link', f"item_{datetime.now().timestamp()}")
    
    # Convert to pretty XML string
    rough_string = tostring(rss, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")

def get_rss_link(feed_id):
    """
    Generate RSS access link for a feed
    """
    return f"/api/rss/{feed_id}"