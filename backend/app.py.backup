from flask import Flask, request, jsonify, Response
from flask_cors import CORS
import requests
from bs4 import BeautifulSoup
from ai_providers import get_ai_provider
from database import DatabaseManager
from rss_generator import generate_rss_xml, get_rss_link
from scheduler import get_scheduler
from config_manager import ConfigManager
import threading
import time
from datetime import datetime

app = Flask(__name__)
CORS(app)
db = DatabaseManager("/app/data/feeds.db")
config_manager = ConfigManager()
scheduler = get_scheduler(db)

@app.route('/api/info', methods=['GET'])
def api_info():
    """
    Returns API information and supported AI providers
    """
    return jsonify({
        "name": "AI RSS Bridge",
        "version": "1.0.0",
        "description": "Generate RSS feeds from any website using AI",
        "supported_providers": ["openai", "gemini", "claude", "perplexity"],
        "endpoints": {
            "/api/generate": "POST - Generate RSS feed from URL",
            "/api/feeds": "GET - List all generated feeds",
            "/api/rss/{feed_id}": "GET - Access RSS XML for specific feed"
        },
        "required_fields": {
            "url": "Website URL to generate RSS from",
            "ai_provider": "AI provider (openai, gemini, claude, perplexity)",
            "api_key": "API key for the selected AI provider"
        }
    })

@app.route('/api/generate', methods=['POST'])
def generate_rss():
    """
    Generate RSS feed from website URL using AI
    """
    print("=== GENERATE RSS ENDPOINT CALLED ===")
    try:
        data = request.get_json()
        print(f"Received data: {data}")
        
        if not data:
            print("Error: No JSON data provided")
            return jsonify({"error": "No JSON data provided"}), 400
        
        url = data.get('url')
        ai_provider = data.get('ai_provider')
        api_key = data.get('api_key')
        
        print(f"URL: {url}")
        print(f"AI Provider: {ai_provider}")
        print(f"API Key provided: {'Yes' if api_key else 'No'}")
        
        if not url or not ai_provider:
            print("Error: Missing required fields")
            return jsonify({
                "error": "Missing required fields",
                "required_fields": ["url", "ai_provider"],
                "optional_fields": ["api_key (if not saved in config)"],
                "supported_providers": ["openai", "gemini", "claude", "perplexity"]
            }), 400
        
        # Use saved API key if not provided
        if not api_key:
            print(f"Getting saved API key for {ai_provider}")
            api_key = config_manager.get_api_key(ai_provider)
            if not api_key:
                print(f"Error: No API key found for {ai_provider}")
                return jsonify({
                    "error": f"No API key found for {ai_provider}",
                    "message": "Please provide api_key in request or save it in config",
                "config_endpoint": "/api/config/api-keys"
            }), 400
    
    try:
        # Check if feed already exists
        existing_feed = db.get_feed_by_url(url)
        if existing_feed:
            feed_id = existing_feed['id']
            rss_link = get_rss_link(feed_id)
            return jsonify({
                "message": "Feed already exists",
                "feed_id": feed_id,
                "rss_link": rss_link,
                "feed_info": existing_feed
            })
        
        # Fetch website content
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        # Parse HTML
        soup = BeautifulSoup(response.content, 'html.parser')
        html_content = soup.get_text()
        
        # Get AI provider and extract content
        provider = get_ai_provider(ai_provider, api_key)
        ai_result = provider.extract_content(url, html_content)
        
        if "error" in ai_result:
            return jsonify({"error": ai_result["error"]}), 500
        
        # Save to database
        feed_id = db.save_feed(
            url=url,
            title=ai_result.get('title', 'AI Generated Feed'),
            description=ai_result.get('description', 'Generated by AI RSS Bridge'),
            ai_provider=ai_provider,
            items=ai_result.get('items', [])
        )
        
        rss_link = get_rss_link(feed_id)
        
        return jsonify({
            "message": "RSS feed generated successfully",
            "feed_id": feed_id,
            "rss_link": rss_link,
            "title": ai_result.get('title'),
            "description": ai_result.get('description'),
            "items_count": len(ai_result.get('items', []))
        })
        
    except requests.RequestException as e:
        return jsonify({"error": f"Failed to fetch website: {str(e)}"}), 400
    except Exception as e:
        return jsonify({"error": f"Internal error: {str(e)}"}), 500

@app.route('/api/feeds', methods=['GET'])
def list_feeds():
    """
    List all generated RSS feeds
    """
    feeds = db.get_all_feeds()
    for feed in feeds:
        feed['rss_link'] = get_rss_link(feed['id'])
    
    return jsonify({
        "feeds": feeds,
        "total": len(feeds)
    })

@app.route('/api/rss/<int:feed_id>', methods=['GET'])
def get_rss_xml(feed_id):
    """
    Get RSS XML for specific feed
    """
    # Get feed info
    feeds = db.get_all_feeds()
    feed_info = None
    for feed in feeds:
        if feed['id'] == feed_id:
            feed_info = feed
            break
    
    if not feed_info:
        return jsonify({"error": "Feed not found"}), 404
    
    # Get feed items
    items = db.get_feed_items(feed_id)
    
    # Generate RSS XML
    feed_data = {
        "title": feed_info['title'],
        "description": feed_info['description'],
        "url": feed_info['url'],
        "items": items
    }
    
    rss_xml = generate_rss_xml(feed_data)
    
    return Response(rss_xml, mimetype='application/rss+xml')

@app.route('/api/update/<int:feed_id>', methods=['POST'])
def update_feed(feed_id):
    """
    Update specific feed with fresh content
    """
    data = request.get_json()
    api_key = data.get('api_key') if data else None
    
    # Get existing feed first to know the provider
    feeds = db.get_all_feeds()
    feed_info = None
    for feed in feeds:
        if feed['id'] == feed_id:
            feed_info = feed
            break
    
    if not feed_info:
        return jsonify({"error": "Feed not found"}), 404
    
    # Use saved API key if not provided
    if not api_key:
        api_key = config_manager.get_api_key(feed_info['ai_provider'])
        if not api_key:
            return jsonify({
                "error": f"No API key found for {feed_info['ai_provider']}",
                "message": "Please provide api_key in request or save it in config",
                "config_endpoint": "/api/config/api-keys"
            }), 400

    try:
        # Fetch fresh content
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        response = requests.get(feed_info['url'], headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        html_content = soup.get_text()
        
        # Extract with AI
        provider = get_ai_provider(feed_info['ai_provider'], api_key)
        ai_result = provider.extract_content(feed_info['url'], html_content)
        
        if "error" in ai_result:
            return jsonify({"error": ai_result["error"]}), 500
        
        # Update database
        db.save_feed(
            url=feed_info['url'],
            title=ai_result.get('title', feed_info['title']),
            description=ai_result.get('description', feed_info['description']),
            ai_provider=feed_info['ai_provider'],
            items=ai_result.get('items', [])
        )
        
        return jsonify({
            "message": "Feed updated successfully",
            "feed_id": feed_id,
            "items_count": len(ai_result.get('items', []))
        })
        
    except Exception as e:
        return jsonify({"error": f"Update failed: {str(e)}"}), 500

@app.route('/api/scheduler/status', methods=['GET'])
def scheduler_status():
    """
    Get scheduler status
    """
    return jsonify({
        "running": scheduler.running,
        "api_keys_configured": list(scheduler.api_keys.keys())
    })

@app.route('/api/scheduler/start', methods=['POST'])
def start_scheduler():
    """
    Start automatic feed updates
    """
    data = request.get_json()
    
    if not data or 'api_keys' not in data:
        return jsonify({
            "error": "API keys required",
            "format": {
                "api_keys": {
                    "openai": "your-openai-key",
                    "gemini": "your-gemini-key"
                }
            }
        }), 400
    
    # Set API keys for auto-updates
    for provider, api_key in data['api_keys'].items():
        if api_key:  # Only set non-empty keys
            scheduler.set_api_key(provider, api_key)
    
    scheduler.start_scheduler()
    
    return jsonify({
        "message": "Scheduler started",
        "providers_configured": list(scheduler.api_keys.keys())
    })

@app.route('/api/scheduler/stop', methods=['POST'])
def stop_scheduler():
    """
    Stop automatic feed updates
    """
    scheduler.stop_scheduler()
    return jsonify({"message": "Scheduler stopped"})

# Configuration endpoints
@app.route('/api/config/api-keys', methods=['GET'])
def get_saved_api_keys():
    """
    Get list of saved API key providers
    """
    print("=== GET SAVED API KEYS ===")
    try:
        providers = config_manager.get_saved_providers()
        print(f"Found saved providers: {providers}")
        return jsonify({"saved_providers": providers})
    except Exception as e:
        print(f"Error getting saved providers: {e}")
        return jsonify({"saved_providers": [], "error": str(e)})

@app.route('/api/config/api-keys', methods=['POST'])
def save_api_key():
    """
    Save API key for a provider
    """
    print("=== SAVE API KEY REQUEST ===")
    data = request.get_json()
    print(f"Received data: {data}")
    
    if not data or 'provider' not in data or 'api_key' not in data:
        print("Missing required fields")
        return jsonify({"error": "Provider and api_key required"}), 400
    
    provider = data['provider']
    api_key = data['api_key']
    
    if provider not in ['openai', 'gemini', 'claude', 'perplexity']:
        print(f"Invalid provider: {provider}")
        return jsonify({"error": "Invalid provider"}), 400
    
    try:
        config_manager.save_api_key(provider, api_key)
        print(f"Successfully saved API key for {provider}")
        return jsonify({"message": f"API key saved for {provider}"})
    except Exception as e:
        print(f"Error saving API key: {e}")
        return jsonify({"error": f"Failed to save API key: {str(e)}"}), 500

@app.route('/api/config/api-keys/<provider>', methods=['DELETE'])
def delete_api_key(provider):
    """
    Delete saved API key for a provider
    """
    if provider not in ['openai', 'gemini', 'claude', 'perplexity']:
        return jsonify({"error": "Invalid provider"}), 400
    
    config_manager.delete_api_key(provider)
    return jsonify({"message": f"API key deleted for {provider}"})

@app.route('/api/config/theme', methods=['GET'])
def get_theme():
    """
    Get saved theme preference
    """
    theme = config_manager.get_theme()
    return jsonify({"theme": theme})

@app.route('/api/config/theme', methods=['POST'])
def save_theme():
    """
    Save theme preference
    """
    data = request.get_json()
    
    if not data or 'theme' not in data:
        return jsonify({"error": "Theme required"}), 400
    
    theme = data['theme']
    if theme not in ['light', 'dark']:
        return jsonify({"error": "Invalid theme. Use 'light' or 'dark'"}), 400
    
    config_manager.save_theme(theme)
    return jsonify({"message": f"Theme saved: {theme}"})

@app.route('/api/config/last-ai-provider', methods=['GET'])
def get_last_ai_provider():
    """
    Get last selected AI provider
    """
    provider = config_manager.get_last_ai_provider()
    return jsonify({"provider": provider})

@app.route('/api/config/last-ai-provider', methods=['POST'])
def save_last_ai_provider():
    """
    Save last selected AI provider
    """
    data = request.get_json()
    
    if not data or 'provider' not in data:
        return jsonify({"error": "Provider required"}), 400
    
    provider = data['provider']
    if provider not in ['openai', 'gemini', 'claude', 'perplexity']:
        return jsonify({"error": "Invalid provider"}), 400
    
    config_manager.save_last_ai_provider(provider)
    return jsonify({"message": f"Last AI provider saved: {provider}"})

@app.route('/api/test/gemini-models', methods=['GET'])
def test_gemini_models():
    """
    Test which Gemini models are available with the saved API key
    """
    try:
        # Buscar a API key do Gemini
        api_key = config_manager.get_api_key('gemini')
        if not api_key:
            return jsonify({"error": "No Gemini API key saved"}), 400
        
        # URL para listar modelos disponíveis
        list_url = f"https://generativelanguage.googleapis.com/v1beta/models?key={api_key}"
        
        response = requests.get(list_url)
        
        if response.status_code == 200:
            data = response.json()
            available_models = []
            
            for model in data.get('models', []):
                model_name = model.get('name', '')
                supported_methods = model.get('supportedGenerationMethods', [])
                
                # Apenas modelos que suportam generateContent
                if 'generateContent' in supported_methods:
                    available_models.append({
                        'name': model_name,
                        'supported_methods': supported_methods
                    })
            
            return jsonify({
                "success": True,
                "available_models": available_models,
                "total_models": len(available_models)
            })
        else:
            return jsonify({
                "error": f"Failed to list models: {response.status_code}",
                "response": response.text
            }), 400
            
    except Exception as e:
        return jsonify({"error": f"Exception: {str(e)}"}), 500

# Legacy endpoint for backward compatibility
@app.route('/api/rss-bridge', methods=['POST'])
def rss_bridge():
    """
    Legacy endpoint - redirects to /api/info for field information
    """
    data = request.get_json()
    if not data or 'url' not in data:
        return jsonify({
            "message": "Please use /api/generate endpoint",
            "redirect_to": "/api/info",
            "new_format": {
                "url": "Website URL",
                "ai_provider": "openai|gemini|claude|perplexity",
                "api_key": "Your AI provider API key"
            }
        }), 400
    
    # Redirect to new endpoint format
    return jsonify({
        "message": "Please use /api/generate endpoint with updated format",
        "redirect_to": "/api/generate"
    }), 400

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8895, debug=True)
